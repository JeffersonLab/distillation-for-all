[
    {
        "description": [
            "Schema to describe the ensembles, streams, and expected t_sources and phases",
            "NOTE: depends on streams.json and facilities.json."
        ]
    },
    {
        "name": "describe options",
        "modify": [
            {
                "option-name": "file",
                "option-doc": "file path relative to the cache"
            },
            {
                "option-name": "status",
                "option-doc": "local status of a file, one of none (doesn't exist), local (does exist), queued (job that output this file is queued), failed (job that output this file failed), or unknown (job that output this file is in an unknown state), promised (being copied from another facility)"
            },
            {
                "option-name": "remote_status",
                "option-doc": "status of a file at JLab, one of none (doesn't exist), tape (on tape), cached (on cache), promised (job that output this file runs in some facility)"
            },
            {
                "option-name": "promiser",
                "option-doc": "facility that is brining the file, when remote_status is promised"
            },
            {
                "option-name": "cfg_file",
                "option-doc": "configuration file path relative to the cache"
            },
            {
                "option-name": "cfg_file_status",
                "option-doc": "configuration file local status; see status"
            },
            {
                "option-name": "cfg_file_remote_status",
                "option-doc": "configuration file remote status; see remote_status"
            },
            {
                "option-name": "eig_file",
                "option-doc": "eigenvector file path relative to the cache"
            },
            {
                "option-name": "eig_file_status",
                "option-doc": "eigenvector file local status; see status"
            },
            {
                "option-name": "eig_file_remote_status",
                "option-doc": "eigenvector file remote status; see remote_status"
            },
            {
                "option-name": "eig_default_file",
                "option-doc": "eigenvector file path relative to the cache for generating the eigenvectors"
            },
            {
                "option-name": "eig_default_run",
                "option-doc": "job auxiliary path relative to the local run directory for generating the eigenvectors"
            }
        ],
        "finalize": {
            "option-group": "artifacts"
        },
        "id": "option-{option-name}"
    },
    {
        "name": "List files in tape",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": [
                "broken-line",
                "( $JLAB_REMOTE find /mss/lattice/isoClover/{cfg_dir} ; $JLAB_REMOTE find /mss/lattice/isoClover/{art_dir} ) |",
                "while read file ; do echo ${{file#/mss/lattice/isoClover/}}; done"
            ],
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status": "tape",
            "status": "none"
        },
        "id": "file-{file}"
    },
    {
        "name": "List files in /cache",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": [
                "broken-line",
                "( $JLAB_REMOTE find /cache/isoClover/{cfg_dir} ; $JLAB_REMOTE find /cache/isoClover/{art_dir} ) |",
                "while read file ; do echo ${{file#/cache/isoClover/}}; done"
            ],
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status": "cached"
        },
        "id": "file-{file}"
    },
    {
        "name": "Fix status for files being brought from tape",
        "description": "avoid operating with files not fully copied from tape",
        "execute": {
            "command": "./kaon-get-files-transitioning-to-cache.sh",
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status": "none"
        },
        "id": "file-{file}"
    },
    {
        "name": "Get remote promises",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": "./kaon-get-promises.sh {cfg_dir} {art_dir}",
            "return-properties": [
                "file",
                "promiser"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status": "promised"
        },
        "id": "file-{file}"
    },
    {
        "name": "List files in the local cache",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": [
                "multiple-lines",
                "if [ -d $LOCAL_CACHE/ ] ; then",
                "  find $LOCAL_CACHE/{{{cfg_dir},{art_dir}}} ! -name '*.globus-to-*' | while read file ; do",
                "    echo ${{file#$LOCAL_CACHE/}}",
                "  done",
                "fi"
            ],
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "status": "local",
            "remote_status@default": "none"
        },
        "id": "file-{file}"
    },
    {
        "name": "Track files being copied from other facilities to this one",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": [
                "multiple-lines",
                "if [ -d $LOCAL_CACHE/ ] ; then",
                "  find $LOCAL_CACHE/{{{cfg_dir},{art_dir}}} -name '*.globus-to-here' | while read file ; do",
                "    a=\"${{file#$LOCAL_CACHE/}}\"; echo {{a%.globus-to-here}}",
                "  done",
                "fi"
            ],
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "status": "promised"
        },
        "id": "file-{file}"
    },
    {
        "name": "Track files being copied to other facilities from this one",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": [
                "multiple-lines",
                "if [ -d $LOCAL_CACHE/ ] ; then",
                "  find $LOCAL_CACHE/{{{cfg_dir},{art_dir}}} -name '*.globus-to-jlab' | while read file ; do",
                "    a=\"${{file#$LOCAL_CACHE/}}\"; echo ${{a%.globus-to-jlab}}",
                "  done",
                "fi"
            ],
            "return-properties": [
                "file"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status": "promised"
        },
        "id": "file-{file}"
    },
    {
        "name": "List files generated by local jobs",
        "select": {
            "kind": "stream"
        },
        "execute": {
            "command": "./kaon-get-slurm-status.sh $LOCAL_RUN/{art_dir}",
            "return-properties": [
                "file",
                "status"
            ]
        },
        "finalize": {
            "kind": "file",
            "remote_status@default": "none"
        },
        "id": "file-{file}"
    },
    {
        "name": "Classify files as configurations",
        "select": {
            "file": {
                "move-to": "cfg_file",
                "matching-re": "{cfg_dir}/{ens_name}_cfg_(?P<cfg_num>\\d+).lime"
            },
            "kind": "file",
            "remote_status": {
                "move-to": "cfg_file_remote_status"
            },
            "status": {
                "move-to": "cfg_file_status"
            }
        },
        "finalize": {
            "kind": "configuration"
        },
        "id": "cfg-{cfg_dir}-{cfg_num}"
    },
    {
        "name": "Classify files as eigenvectors",
        "select": {
            "file": {
                "move-to": "eig_file",
                "matching-re": "{art_dir}/eigs_mod/{ens_name}\\.3d\\.eigs\\.n(?P<eig_num_vecs>\\d+).mod(?P<cfg_num>\\d+)$"
            },
            "kind": "file",
            "remote_status": {
                "move-to": "eig_file_remote_status"
            },
            "status": {
                "move-to": "eig_file_status"
            }
        },
        "finalize": {
            "kind": "eigenvector"
        },
        "id": "eig-{art_dir}-{cfg_num}"
    },
    {
        "name": "Associate a configuration to a generated eigenvector",
        "select": {
            "kind": "configuration"
        },
        "finalize": {
            "kind": "eigenvector"
        },
        "id": "eig-{art_dir}-{cfg_num}"
    },
    {
        "name": "Generate entries for missing eigenvectors",
        "select": {
            "eig_default_file": {
                "interpolate": "{art_dir}/eigs_mod/{ens_name}.3d.eigs.n{default_num_vecs}.mod{cfg_num}"
            },
            "eig_default_run": {
                "interpolate": "$LOCAL_RUN/{art_dir}/eigs_mod/eigs.cnf{cfg_num}.n{default_num_vecs}.sf{smear_fact}.sn{smear_num}"
            },
            "kind": [
                "configuration"
            ]
        },
        "finalize": {
            "kind": "eigenvector",
            "eig_file@default": "none",
            "eig_file_remote_status@default": "none",
            "eig_file_status@default": "none"
        },
        "id": "eig-{art_dir}-{cfg_num}"
    },
    {
        "name": "Classify files as propagators (unphased)",
        "select": {
            "file": {
                "move-to": "prop_file",
                "matching-re": "{art_dir}/prop_db/{ens_name}.prop.n(?P<prop_num_vecs>\\d+).light.t0_(?P<prop_t_source>\\d+).sdb(?P<fg_num>\\d)"
            },
            "kind": "file",
            "remote_status": {
                "move-to": "prop_file_remote_status"
            },
            "status": {
                "move-to": "prop_file_status"
            }
        },
        "finalize": {
            "kind": "propagator",
            "prop_phase": "0.00"
        },
        "id": "prop-{art_dir}-{cfg_num}-{prop_phase}-{prop_t_source}"
    },
    {
        "name": "Classify files as propagators (phased)",
        "select": {
            "file": {
                "move-to": "prop_file",
                "matching-re": "{art_dir}/phased/prop_db.*/{ens_name}.phased_0_0_(?P<prop_phase>.+).prop.n(?P<prop_num_vecs>\\d+).light.t0_(?P<prop_t_source>\\d+).sdb(?P<cfg_num>\\d+)"
            },
            "kind": "file",
            "remote_status": {
                "move-to": "prop_file_remote_status"
            },
            "status": {
                "move-to": "prop_file_status"
            }
        },
        "finalize": {
            "kind": "propagator"
        },
        "id": "prop-{art_dir}-{cfg_num}-{prop_phase}-{prop_t_source}"
    },
    {
        "name": "Associate an eigenvector to a generated propagator",
        "select": [
            "joint",
            {
                "kind": {
                    "in": [
                        "eigenvector"
                    ],
                    "move-to": null
                }
            },
            {
                "kind": {
                    "in": [
                        "propagator"
                    ],
                    "move-to": null
                }
            }
        ],
        "finalize": {
            "kind": "propagator"
        },
        "id": "prop-{art_dir}-{cfg_num}-{prop_phase}-{prop_t_source}"
    },
    {
        "select": {
            "file": {
                "move-to": "file_gprop",
                "matching-re": "{art_dir}/unsmeared_meson_dbs.*/unsmeared_meson\\.phased_d001_(?P<gprop_phase>\\d+)\\.n(?P<gprop_num_vecs>\\d+)\\.(?P<gprop_t_source>\\d+)\\.tsnk_(?P<gprop_t_seps>\\w+)\\.Gamma_.*\\.sdb(?P<cfg_num>\\d+)(>P<gprop_suffix>.*)$"
            },
            "kind": "file"
        },
        "finalize": {
            "kind": "genprop"
        },
        "id": "genprop-{art_dir}-{cfg_num}-{gprop_phase}-{gprop_t_source}-{gprop_t_seps}"
    }
]
